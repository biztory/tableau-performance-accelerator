/* 
 * Tableau Server REST API
 *
 * AUTO GENERATED.
 *
 * OpenAPI spec version: 2.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Biztory.EnterpriseToolkit.TableauServerUnifiedApi.Rest.Model
{
    /// <summary>
    /// QueryViewsForSiteResponsePagination
    /// </summary>
    [DataContract]
    public partial class QueryViewsForSiteResponsePagination :  IEquatable<QueryViewsForSiteResponsePagination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryViewsForSiteResponsePagination" /> class.
        /// </summary>
        /// <param name="PageNumber">pageNumber.</param>
        /// <param name="PageSize">pageSize.</param>
        /// <param name="TotalAvailable">totalAvailable.</param>
        public QueryViewsForSiteResponsePagination(string PageNumber = default(string), string PageSize = default(string), string TotalAvailable = default(string))
        {
            this.PageNumber = PageNumber;
            this.PageSize = PageSize;
            this.TotalAvailable = TotalAvailable;
        }
        
        /// <summary>
        /// pageNumber
        /// </summary>
        /// <value>pageNumber</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }

        /// <summary>
        /// pageSize
        /// </summary>
        /// <value>pageSize</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public string PageSize { get; set; }

        /// <summary>
        /// totalAvailable
        /// </summary>
        /// <value>totalAvailable</value>
        [DataMember(Name="totalAvailable", EmitDefaultValue=false)]
        public string TotalAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryViewsForSiteResponsePagination {\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalAvailable: ").Append(TotalAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryViewsForSiteResponsePagination);
        }

        /// <summary>
        /// Returns true if QueryViewsForSiteResponsePagination instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryViewsForSiteResponsePagination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryViewsForSiteResponsePagination input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalAvailable == input.TotalAvailable ||
                    (this.TotalAvailable != null &&
                    this.TotalAvailable.Equals(input.TotalAvailable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalAvailable != null)
                    hashCode = hashCode * 59 + this.TotalAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
